#!/bin/bash

set -e

# Resolve all dependencies that the application requires to run.
# From https://github.com/github/scripts-to-rule-them-all/blob/master/script/bootstrap
# Also from https://github.com/Connexions/cnx-rulesets


if [ -f "Brewfile" ] && [ "$(uname -s)" = "Darwin" ]; then
  >&2 echo "==> Updating Homebrew…"
  brew update || exit 1

  brew bundle check >/dev/null 2>&1  || {
    >&2 echo "==> Installing Homebrew dependencies…"
    brew bundle || exit 1
  }
fi


# Set up the correct version of node
if [[ "${CI}" != "true" ]]; then # Skip the nvm stuff if running in Travis
  >&2 echo "==> Setting up node version"
  if [[ -f ~/.nvm/nvm.sh ]]; then
    source ~/.nvm/nvm.sh
    nvm install $(< .nvmrc)
  else
    >&2 echo "Skipping the node version setup because nvm does not appear to be installed."
    >&2 echo "See https://github.com/creationix/nvm for install instructions."
    >&2 echo "Using node: $(node --version)"
    >&2 echo "Using npm: $(npm --version)"
  fi
fi

# Install https://yarnpkg.com (package manager)
if [[ ! $(which yarn) ]]; then
  # Prompt when on debian
  if [[ $(which apt-key) ]]; then
    read -p "Would you like to install yarn (y/N)?" choice
    echo # Move to a new line
    if [[ "${choice}" =~ ^[Yy]$ ]]; then
      >&2 echo "==> Installing yarn. You may be prompted for a password"
      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - || exit 1
      echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list || exit 1
      sudo apt-get update && sudo apt-get install yarn || exit 1
    else
      echo "Yarn is not installed. Exiting"
      exit 1
    fi
  else
    echo "Not sure how to install yarn automatically. If you are using macOS do you have https://brew.sh installed?"
    exit 1
  fi
fi


# Set up the correct version of ruby

# Note: Skip rbenv for Travis because it already has ruby
if [[ "${CI}" != "true" ]]; then
  if [[ -f ".ruby-version" ]]; then
    if [[ -n $(which rbenv) ]]; then

      if [ -z "$(rbenv version-name 2>/dev/null)" ]; then
        >&2 echo "==> Installing Ruby…"
        rbenv install --skip-existing
      fi
    else
      >&2 echo "WARNING: Skipping rbenv. Using local ruby"
    fi
  fi

  # Initialize rbenv (if installed)
  [[ -n $(which rbenv) ]] && eval "$(rbenv init -)"

  which bundle >/dev/null 2>&1  || {
    >&2 echo "==> Installing Ruby Bundler gem…"
    gem install bundler || {
      >&2 echo ''
      >&2 echo ''
      >&2 echo '--------------- Error -------------'
      >&2 echo 'Problem installing ruby bundler.'
      exit 1
    }

    [[ -n $(which rbenv) ]] && rbenv rehash
  }
fi

if [ -f "Gemfile" ]; then
  >&2 echo "==> Installing gem dependencies…"
  which bundle
  bundle check --path vendor/gems >/dev/null 2>&1  || {
    bundle install --path vendor/gems --quiet --without production
  }
fi


# Install system dependencies
